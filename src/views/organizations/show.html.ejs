<!--PARA DISPOSITIVOS MOVILES-->
<meta
    name="viewport"
    content="width=device-width,initial-scale=1"
/>


<h1>Organización:</h1>
<%= organization.name %>
<br>
<img src="<%= organization.url %>">
<br><br>


<!--

WITHOUT HANDLERS

-->


<div><h2>Butón para activar cambios</h2></div>
<div>Cambia su nombre con getElementById</div>
<button id="button1" onclick="func()">Hola</button>
<br><br><br>

<div>Escribe un elemento abajo con getElementsByTagName</div>
<ul>
    <li>Elemento1</li>
    <li>Elemento2</li>
    <li>Elemento3</li>
</ul>
<div id="elementos"></div>

<br><br><br>

<div>Escribe ambas líneas con querySelectorAll</div>
<div class="example-class">ExampleClass1</div>
<div class="example-class">ExampleClass2</div>
<br>
<div id="examples"></div>

<br><br><br>

<div>El boton crea un elemento en un dive preexistente, que comparte sus propiedades (style)</div>
<button onclick="func2()">Crear elemento</button>
<br><br>
<div id="parent-element" style="color:red"></div>
<br><br>
<div>El boton borra un elemento</div>
<button onclick="func3()">Eliminar elemento</button>
<br><br><br><br>



<script>

    function func() {
        document.getElementById("button1").innerHTML = "Button";
    
        const liElement = document.getElementsByTagName("LI")[0].textContent;
        document.getElementById("elementos").innerHTML = liElement;
    
        const exampleClassList = document.querySelectorAll(".example-class");
        let text = ""; 
        exampleClassList.forEach(example => {
            text = text + example.textContent + " ";
        });
        document.getElementById("examples").innerHTML = text;
        const examples = document.getElementById("examples");
        examples.style.color = "blue";
    }
    
    function func2() {
        const element = document.getElementById("parent-element");
        const newElement = document.createElement("li");
        // No funciona:
        // newElement.textContent = "<div><em>Nuevo elemento creado en función!</em></div>";
        newElement.textContent = "Nuevo elemento creado en función!";
        newElement.setAttribute("id", "that-one-element");
        element.appendChild(newElement);
    }
    
    function func3() {
        const element = document.getElementById("parent-element");
        const newElement = document.getElementById("that-one-element");
        element.removeChild(newElement);
        newElement.remove();
    }
    
    </script>

<h1>USING HANLDERS</h1>
<!--Es más classy que meterlo en el HTML como arriba-->


<!--

USING HANDLERS

-->

<button id="handled1">Can you handle me?</button>
<div id="handle-message"></div>

<br><br><br>


<script>

function handlerFunction1() {
    const x = document.getElementById("handle-message");
    x.innerHTML = "Yes I can!";
}

const handledElement = document.getElementById("handled1");
handledElement.onclick = handlerFunction1;

</script>


<!--

LISTENERS

-->

<style>

@media screen and (min-width: 1000px) {
    #bunny {
        width: 500px;
    }
}

@media screen and (max-width: 999px) {
    #bunny {
        width: 300px;
    }
}

</style>

<h1>USING LISTENERS</h1>

<br>
<img id="bunny" src="<%= assetPath('bunny1.jpg') %>">
<br><br><br>


<script>

const image = document.getElementById("bunny");

image.addEventListener('click', function(x) {
    image.style.border = "solid red";
});

image.addEventListener('mouseover', function(x) {
    image.style.border = "solid green";
});

</script>


<br><br><br><br><br>

<h1>USING REACT</h1>

<div id="root1">This is a root.
</div>
<br><br>
<div id="root2">This is a root.
</div>
<br><br>
<div id="root3">This is a root.
</div>
<br><br><br>


<script src="https://unpkg.com/react@17/umd/react.production.min.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js" crossorigin></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js" ></script>
<script type="text/babel">

const rootNode1 = document.getElementById("root1");
ReactDOM.render(<div>Esto fue agregado con REACT</div>, rootNode1);

// funcional:

function FunctionComponent(props) {
    return (
        <ul>
            <li>Figs</li>
            <li>Oranges</li>
            <li>Bananas</li>
        </ul>
    );
}

ReactDOM.render(<FunctionComponent/>, root2);

class ClassComponent extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        return (
            <button>This is a random button</button>
        );
    }
}

ReactDOM.render(<ClassComponent/>, root3);

</script>

<h3>Real example of React working</h3>
<div id="real-root">Hello this shouldn't show</div>
<br><br><br>

<script type="text/babel">

const INITIAL_STATE = [
    {
        albumId: 1,
        id: 1,
        title: "accusamus beatae ad facilis cum similique qui sunt",
        url: "https://via.placeholder.com/600/92c952",
        thumbnailUrl: "https://via.placeholder.com/150/92c952",
    },
    {
        albumId: 1,
        id: 2,
        title: "reprehenderit est deserunt velit ipsam",
        url: "https://via.placeholder.com/600/771796",
        thumbnailUrl: "https://via.placeholder.com/150/771796",
    },
    {
        albumId: 1,
        id: 3,
        title: "officia porro iure quia iusto qui ipsa ut modi",
        url: "https://via.placeholder.com/600/24f355",
        thumbnailUrl: "https://via.placeholder.com/150/24f355",
    },
    ];

function Photos(props) {
    const photos = props.photos;
    console.log(photos);
    return (
        <div>
            <h3>React Photos</h3>
            <Button />
            <ul className="photos">
                {photos.map((photo) => (
                    <SinglePhoto key={photo.id} photo={photo}/>
                ))}
            </ul>
        </div>
     );
}


function Button(props) {
    return (
        <button>Random Button</button>
    );
}

function SinglePhoto(props) {
    const {photo} = props;
    return (
        <li className="photo">
            <h4>{photo.title}</h4>
            <img src={photo.thumbnailUrl} />
        </li>
    );
}


const realNode = document.getElementById("real-root");
ReactDOM.render(<Photos photos={INITIAL_STATE} />, realNode);

</script>


<br><br><br><br>
<h1>CORRECT WAY TO USE REACT</h1>
<!-- 
Ahora como en verdad se hace el react
En assets/js/app.jsx se hace el render
En js/components/App.jsx hay código REACT de un texto


-->


<div id="react-app"></div>
 
<br><br><br>

<div id="react-photos"></div>
 
<br><br><br>


<!--

HOOKS AND STUFF

-->

<h1>HOOKS AND STUFF</h1>
<div id="hook1"></div>

<script type="text/babel">

function RandomFunction() {
    const [text, setText] = React.useState("random_text");
    //setText("random_text_2");
    return (
        <li>{text}!</li>
    );
}

const hook1 = document.getElementById("hook1");
ReactDOM.render(<RandomFunction />, hook1);

</script>

<br><br><br><br>


<!--

EJEMPLO clase-19-client-side-frameworks

-->

<h1>EXAMPLE</h1>

<div id="example-root"></div>
<br><br>
<div id="example-message"></div>
<br><br><br><br>

<style>

.centered {
    width: 70%;
    background-color: white;
    padding: 10px;
    border-radius: 10px;
    margin: 40px auto;
}
.publication {
    border: 1px solid #5D5D5F;
    padding: 25px;
    height: 310px;
    width: 300px;
    box-sizing: border-box;
}

.square {
    background-color: rgba(0, 0, 0, 0.1);
    font-size: 50px;
    height: 250px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 5px;
}
</style>


<script type="text/babel">

    function printOnScreen(text) {
        const node = document.getElementById("example-message");
        node.innerHTML = node.innerHTML + "<br>" + text;
    }

    function LifecycleExample(props) {
      const [showPublication, setShowPublication] = React.useState(false);

      const handleShowPublication = () => {
        setShowPublication((publication) => setShowPublication(!publication));
      };

      return (
        <div>
          <input
            id="check-publication"
            type="checkbox"
            onChange={handleShowPublication}
          />
          <label for="check-publication">{showPublication ? 'Unmount' : 'Mount'} publication</label>
          {showPublication && <Publication />}
        </div>
      );
    }

    function Publication(props) {
      const [content, setContent] = React.useState('');
      const LIKED_CONTENT = '♥️';

      React.useEffect(() => {
        console.log('Publication: after render');
        return () => printOnScreen('Publication: cleanup after render');
      });

      React.useEffect(() => {
        printOnScreen('Publication: mounted');
        
        return () => {
            printOnScreen('Publication: unmounted');
        };
      }, []);

      React.useEffect(() => {
        printOnScreen('Publication: updated content');
        return () => {
            printOnScreen('Publication: cleanup content');
        };
      }, [content]);

      const handleClick = () => {
        setContent((content) => content ? '' : LIKED_CONTENT);
      };

      return (
        <div class="publication">
          <div class="square">{content}</div>
          <Button
            text={content ? 'Unlike' : 'Like'}
            onClick={handleClick}
          />
        </div>
      );
    }

    function Button(props) {
      const { onClick, text } = props;
      return (
        <button onClick={onClick}>{text}</button>
      );
    }

    const rootNode = document.getElementById('example-root');
    ReactDOM.render(<LifecycleExample />, rootNode);

  </script>


<br><br><br><br><br>

<h1>WITH PARAMETERS</h1><h1 style="color:red">(FAILED)</h1>
<br>

<div id="react-param" data-x="Loren ipsum"></div>

<br><br><br><br><br>